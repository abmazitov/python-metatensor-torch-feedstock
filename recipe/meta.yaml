{% set name = "metatensor-torch" %}
{% set version = "0.7.4" %}

package:
  name: python-{{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/metatensor_torch-{{ version }}.tar.gz
  sha256: e317932c5a6cfd6fde42531ed8d9daae4f13f6ab2afe9bee86ad097887c906c8

build:
  # conda-forge's libtorch is not yet available on Windows
  skip: true  # [win]
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  number: 0
  script_env:
    # Don't build metatensor-torch, but use the already compiled `libmetatensor-torch`
    # package
    - METATENSOR_TORCH_PYTHON_USE_EXTERNAL_LIB="ON"

requirements:
  build:
    # Nothing will be built but we need a correct env to make pip happy
    - {{ compiler('cxx') }}
    - {{ stdlib("c") }}
    - cmake
    - make
  host:
    - python
    - setuptools >=75
    - packaging >=23
    # We build against the CPU version of torch to not have to deal with CUDA compilers
    # (torch's CMake targets tries to find CUDA compilers even when there is no CUDA
    # code to build). This does not impact the `run` dependency, since torch's
    # `run_exports` are variant agnostic
    - pytorch=*=cpu*
    - pip
    - libmetatensor-torch {{ version }}
    - python-metatensor-core >=0.1.10,<0.2.0
  run:
    - python
    - pytorch
    - libmetatensor-torch {{ version }}
    - python-metatensor-core >=0.1.10,<0.2.0
    - python-vesin

test:
  imports:
    - metatensor
  commands:
    - pip check
  requires:
    - pip

about:
  home: https://github.com/lab-cosmo/metatensor
  summary: Python bindings for metatensor-torch
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  doc_url: docs.metatensor.org

extra:
  recipe-maintainers:
    - PicoCentauri
    - Luthaf
